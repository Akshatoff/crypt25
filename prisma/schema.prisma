// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @unique
  email         String    @unique
  name          String
  createdAt     DateTime  @default(now())
  emailVerified Boolean
  image         String?
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  School        School?   @relation(fields: [schoolCode], references: [code])
  schoolCode    String?
  attempts      Attempt[]
  level         Int       @default(1)
  score         Int       @default(0)
  banned        Boolean   @default(false)
  finished      Boolean   @default(false)

  @@index([schoolCode])
  @@map("user")
}

model Session {
  id           String   @id @default(cuid())
  expiresAt    DateTime
  token        String
  createdAt    DateTime
  updatedAt    DateTime
  ipAddress    String?
  userAgent    String?
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@index([userId])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model School {
  name      String
  users     User[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  code      String    @id @unique
  Attempt   Attempt[]
}

model Attempt {
  id          String   @id @default(cuid())
  school_id   String
  user_id     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userAttempt String
  School      School?  @relation(fields: [schoolCode], references: [code])
  schoolCode  String?
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?

  @@index([user_id])
  @@index([school_id])
}

model CorrectAttempt {
  id      String @id @default(cuid())
  level   Int
  attempt String
}
